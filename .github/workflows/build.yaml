name: Maven Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonar:
    runs-on: ubuntu-latest

    outputs:
      quality_gate_passed: ${{ steps.check_quality_gate.outputs.quality_gate_status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v1.4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectKey: rakbankdubai_rakbank-assignment
        organization: rakbankdubai
        scannerMode: 'CLI'
        args: >
          -Dsonar.projectBaseDir=demo
          -Dsonar.java.binaries=demo/target/classes

    - name: Check Quality Gate
      id: check_quality_gate
      run: |
        echo "Checking Quality Gate status..."
        status=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=rakbankdubai_rakbank-assignment" | jq -r .projectStatus.status)
        echo "Quality Gate status: $status"
        if [ "$status" != "OK" ]; then
          echo "Quality Gate failed"
          echo "::set-output name=quality_gate_status::failed"
          exit 1
        else
          echo "Quality Gate passed"
          echo "::set-output name=quality_gate_status::passed"
        fi
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    needs: sonar
    runs-on: ubuntu-latest
    if: needs.sonar.outputs.quality_gate_passed == 'passed'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven

    - name: Build with Maven
      run: mvn -B package --file demo/pom.xml

    - name: Verify .jar file exists
      run: ls -l demo/target/*.jar

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 211125715340.dkr.ecr.ap-south-1.amazonaws.com

    - name: Set up Kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: 211125715340.dkr.ecr.ap-south-1.amazonaws.com
        ECR_REPOSITORY: rakbankdemoregistry
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
        echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> $GITHUB_ENV
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Create or Update Kubernetes Deployment
      run: |
        aws eks update-kubeconfig --name my-cluster --region ap-south-1
        kubectl create deployment rakbankdemoapp --image=${{ env.IMAGE_DIGEST }} --dry-run=client -o yaml | kubectl apply -f -
