# name: Infra Create and App Deployment

# on: 
#   workflow_dispatch: 
#   push:
#     branches:
#       - main
#     paths:
#       - 'rakbank-terraform/**'

# jobs:
#   secrets-scan:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Install Gitleaks
#       run: |
#         curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.2.7/gitleaks_8.2.7_linux_x64.tar.gz -o gitleaks.tar.gz
#         tar -xzf gitleaks.tar.gz
#         chmod +x gitleaks
#         sudo mv gitleaks /usr/local/bin/

#     - name: Run Gitleaks Scan
#       run: gitleaks detect --source . --report-path gitleaks-report.json

#   infra-creation:
#     needs: secrets-scan
#     runs-on: ubuntu-latest
#     outputs:
#       apply_status: ${{ steps.set-status.outputs.apply_status }}
#       destroy_status: ${{ steps.set-destroy-status.outputs.destroy_status }}
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     - name: Setup AWS Credentials
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: |
#         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

#     - name: Terraform Init
#       id: fmt
#       run: cd ./rakbank-terraform && terraform init

#     - name: Terraform fmt
#       id: init
#       run: cd ./rakbank-terraform && terraform fmt --check

#     - name: Terraform Validate
#       id: validate
#       run: cd ./rakbank-terraform && terraform validate -no-color

#     - name: Terraform Plan
#       id: plan
#       run: |
#         cd ./rakbank-terraform 
#         terraform plan --out ./tfplan -no-color
#         terraform show -json ./tfplan > ./tfplan.json

#     - name: Terraform Apply
#       id: apply
#       if: contains(github.event.head_commit.message, 'terraform apply')
#       run: cd ./rakbank-terraform && terraform apply -auto-approve

#     - name: Set apply status
#       id: set-status
#       if: success()
#       run: echo "apply_status=true" >> $GITHUB_OUTPUT

#     - name: Terraform Destroy
#       id: destroy
#       if: contains(github.event.head_commit.message, 'terraform destroy')
#       run: cd ./rakbank-terraform && terraform destroy -auto-approve

#     - name: Set destroy status
#       id: set-destroy-status
#       if: contains(github.event.head_commit.message, 'terraform destroy')
#       run: echo "destroy_status=true" >> $GITHUB_OUTPUT

#   sonar:
#     needs: infra-creation
#     if: needs.infra-creation.outputs.destroy_status != 'true' && needs.infra-creation.outputs.apply_status == 'true'
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'temurin'

#     - name: Install Maven
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y maven

#     - name: Verify Java and Maven Version
#       run: |
#         java -version
#         mvn -version

#     - name: Cache Maven packages
#       uses: actions/cache@v3
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: ${{ runner.os }}-maven

#     - name: Build with Maven (Sonar Preparation)
#       run: mvn clean compile
#       working-directory: demo

#     - name: Run SonarCloud Scan
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       run: |
#         mvn sonar:sonar -Dsonar.projectKey=rakbankdubai_rakbank-assignment -Dsonar.organization=rakbankdubai -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#       working-directory: demo

#   build:
#     needs: sonar
#     if: needs.infra-creation.outputs.destroy_status != 'true'
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'temurin'

#     - name: Cache Maven packages
#       uses: actions/cache@v3
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: ${{ runner.os }}-maven

#     - name: Build with Maven
#       run: |
#         mvn clean install
#         mvn -B package
#       working-directory: demo

#     - name: Verify .jar file exists
#       run: ls -l demo/target/*.jar

#   docker:
#     needs: build
#     if: needs.infra-creation.outputs.destroy_status != 'true'
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-south-1

#     - name: Log in to Amazon ECR
#       run: |
#         aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 211125715340.dkr.ecr.ap-south-1.amazonaws.com

#     - name: Build and push Docker image
#       env:
#         ECR_REGISTRY: 211125715340.dkr.ecr.ap-south-1.amazonaws.com
#         ECR_REPOSITORY: rakbankdemoregistry
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         echo "Building Docker image..."
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         echo "Pushing Docker image..."
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "Getting the IMAGE_DIGEST"
#         IMAGE_DIGEST=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' --output text)
#         echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> $GITHUB_ENV

#   helm-deployment:
#     needs: docker
#     if: needs.infra-creation.outputs.destroy_status != 'true'
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     # - name: Configure AWS credentials
#     #   uses: aws-actions/configure-aws-credentials@v1
#     #   with:
#     #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     #     aws-region: ap-south-1

#     - name: Setup AWS Credentials
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: |
#         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

#     - name: Update Kubeconfig
#       run: |
#         aws eks update-kubeconfig --name my-cluster --region ap-south-1

#     - name: Install Helm
#       run: |
#         curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

#     - name: Package Helm Chart
#       run: |
#         cd webeksdeployment/rakbankdemoapp
#         helm package .

#     - name: Deploy Helm Chart
#       env:
#         ECR_REGISTRY: 211125715340.dkr.ecr.ap-south-1.amazonaws.com
#         ECR_REPOSITORY: rakbankdemoregistry
#         IMAGE_TAG: ${{ github.sha }}
#         IMAGE_DIGEST: ${{ steps.build.outputs.IMAGE_DIGEST }}
#       run: |
#         cd webeksdeployment/rakbankdemoapp
#         ls -lrth
#         helm upgrade --install rakbankdemoapp ./rakbankdemoapp-0.1.0.tgz
